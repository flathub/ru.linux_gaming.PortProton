From 3c329cfce9cea2b54c35bbf50a2aa931bf0892cb Mon Sep 17 00:00:00 2001
From: James Lu <james@overdrivenetworks.com>
Date: Sun, 7 Jul 2024 12:48:55 -0700
Subject: [PATCH] exe-thumbnailer: rework icon size calculation

- Add a test for an input with a (nonstandard) 192x192 icon size. This should be scaled down for 128x128 and left as is for 256x256 output
- Always clamp output icon sizes to either 128 or 256, unless --force-resize is used
---
 icoextract/scripts/thumbnailer.py | 36 +++++++++++++++-----------
 tests/Makefile                    | 21 +++++++++++++---
 tests/test_thumbnailer.py         | 42 +++++++++++++++++++++++++++++++
 3 files changed, 80 insertions(+), 19 deletions(-)

diff --git a/icoextract/scripts/thumbnailer.py b/icoextract/scripts/thumbnailer.py
index b8245cf..3c84c0c 100755
--- a/icoextract/scripts/thumbnailer.py
+++ b/icoextract/scripts/thumbnailer.py
@@ -30,23 +30,29 @@ def generate_thumbnail(inputfile, outfile, size=256, force_resize=False):
         logger.debug("Force resizing icon to %dx%d", size, size)
         im = im.resize((size, size))
     else:
+        if size > 256:
+            logger.warning('Icon sizes over 256x256 are not supported')
+            size = 256
+        elif size not in (128, 256):
+            logger.warning('Unsupported size %d, falling back to 128x128', size)
+            size = 128
+
         # Note: 256x256 is the largest size supported by the .ico format
-        if (256, 256) in im.info['sizes']:
-            if size >= 256:
-                # A large size thumbnail was requested
-                logger.debug("Writing large size thumbnail for %s to %s", inputfile, outfile)
-                im.save(outfile, "PNG")
-                return
+        if size == 256:
+            # A large size thumbnail was requested. No downwards resizing is needed, so export any icon as is
+            logger.debug("Writing large size thumbnail for %s to %s", inputfile, outfile)
+            im.save(outfile, "PNG")
+            return
 
-            # If large size thumbnail wasn't requested but one is available, pick an 128x128 icon if available;
-            # otherwise scale down from 256x256 to 128x128. 128x128 is the largest resolution allowed for
-            # "normal" size thumbnails.
-            if (128, 128) in im.info['sizes']:
-                logger.debug("Using native 128x128 icon")
-                im.size = (128, 128)
-            else:
-                logger.debug("Resizing icon from 256x256 to 128x128")
-                im = im.resize((128, 128))
+        # If large size thumbnail wasn't requested but one is available, pick an 128x128 icon if available;
+        # otherwise scale down from 256x256 to 128x128. 128x128 is the largest resolution allowed for
+        # "normal" size thumbnails.
+        if (128, 128) in im.info['sizes']:
+            logger.debug("Using native 128x128 icon")
+            im.size = (128, 128)
+        elif im.size > (128, 128):
+            logger.debug("Downsizing icon to 128x128")
+            im = im.resize((128, 128))
         logger.debug("Writing normal size thumbnail for %s to %s", inputfile, outfile)
 
     im.save(outfile, "PNG")
diff --git a/tests/Makefile b/tests/Makefile
index 262dda5..ffa8f95 100644
--- a/tests/Makefile
+++ b/tests/Makefile
@@ -4,7 +4,7 @@ PREFIX32=i686-w64-mingw32-
 
 all: testapp64.exe testapp64-nores.exe testapp64-noicon.exe \
 	testapp64-smallonly.exe \
-	testapp64-with128.exe
+	testapp64-with128.exe testapp64-with192.exe
 
 # icon with standard sizes: 16x16, 32x32, 48x48, 256x256
 testapp.ico: testapp.png
@@ -15,12 +15,21 @@ testapp.ico: testapp.png
 	convert testapp.png -resize 32x32 -depth 8 -remap netscape: -transparent black tmp-testapp8bpp-32.bmp
 	convert testapp.png -resize 48x48 -depth 8 -remap netscape: -transparent black tmp-testapp8bpp-48.bmp
 	convert testapp.png tmp-testapp*.bmp testapp.ico
-# small icon
+
+# Small icon (only up to 48x48)
+testapp-smallonly.ico: testapp.png
 	convert tmp-testapp-*.bmp testapp-smallonly.ico
+
 # All standard sizes + 128x128
+testapp-with128.ico: testapp.png
 	convert testapp.png -resize 128x128 tmp-testapp-128.png
 	convert testapp.png tmp-testapp*.bmp tmp-testapp*.png testapp-with128.ico
 
+# All small sizes + 128x128 + 192x192 (excluding 256x256)
+testapp-with192.ico: testapp.png
+	convert testapp.png -resize 192x192 tmp-testapp-192.png
+	convert tmp-testapp*.bmp tmp-testapp-128.png tmp-testapp-192.png testapp-with192.ico
+
 # Build with icon + version resource
 define build-with-icon =
 cat testapp-base.rc > tmp-testapp$(ICOSUFFIX).rc
@@ -35,11 +44,15 @@ testapp64.exe testapp32.exe: testapp.c testapp.ico
 	$(build-with-icon)
 
 testapp64-smallonly.exe testapp32-smallonly.exe: ICOSUFFIX=-smallonly
-testapp64-smallonly.exe testapp32-smallonly.exe: testapp.c testapp.ico
+testapp64-smallonly.exe testapp32-smallonly.exe: testapp.c testapp-smallonly.ico
 	$(build-with-icon)
 
 testapp64-with128.exe testapp32-with128.exe: ICOSUFFIX=-with128
-testapp64-with128.exe testapp32-with128.exe: testapp.c testapp.ico
+testapp64-with128.exe testapp32-with128.exe: testapp.c testapp-with128.ico
+	$(build-with-icon)
+
+testapp64-with192.exe testapp32-with192.exe: ICOSUFFIX=-with192
+testapp64-with192.exe testapp32-with192.exe: testapp.c testapp-with192.ico
 	$(build-with-icon)
 
 # Build with only version resource
diff --git a/tests/test_thumbnailer.py b/tests/test_thumbnailer.py
index 62496ed..c0f7698 100755
--- a/tests/test_thumbnailer.py
+++ b/tests/test_thumbnailer.py
@@ -61,5 +61,47 @@ def test_thumbnailer_force_resize(self):
             self.assertEqual(im.width, 128)
             self.assertEqual(im.height, 128)
 
+    def test_192_normal(self):
+        """Test that exe files with oddly sized icons (192x192) are wrapped to the expected dimensions"""
+        outfile = self._generate_thumbnail("testapp64-with192.exe", "tmp-thumbnail-192-normal.png", size=128)
+        with Image.open(outfile) as im:
+            self.assertEqual(im.width, 128)
+            self.assertEqual(im.height, 128)
+            self._compare_equal(im, "tmp-testapp-128.png")
+
+    def test_192_large(self):
+        """Test that exe files with oddly sized icons (192x192) are wrapped to the expected dimensions"""
+        outfile = self._generate_thumbnail("testapp64-with192.exe", "tmp-thumbnail-192-large.png", size=256)
+        with Image.open(outfile) as im:
+            self.assertEqual(im.width, 192)
+            self.assertEqual(im.height, 192)
+
+    def test_unsupported_output_size_too_large(self):
+        """Test an invalid requested icon size (> 256)"""
+        outfile = self._generate_thumbnail("testapp64.exe", "tmp-thumbnail-test-unsupported-size-too-large.png",
+        size=300)
+        with Image.open(outfile) as im:
+            self.assertEqual(im.width, 256)
+            self.assertEqual(im.height, 256)
+            self._compare_equal(im, "testapp.png")
+
+    def test_unsupported_output_size_too_small(self):
+        """Test an invalid requested icon size (< 128)"""
+        outfile = self._generate_thumbnail("testapp64.exe", "tmp-thumbnail-test-unsupported-size-too-small.png",
+        size=64)
+        with Image.open(outfile) as im:
+            self.assertEqual(im.width, 128)
+            self.assertEqual(im.height, 128)
+            self._compare_equal(im, "tmp-testapp-128.png")
+
+    def test_unsupported_output_size_between(self):
+        """Test an invalid requested icon size (> 128, < 256)"""
+        outfile = self._generate_thumbnail("testapp64.exe", "tmp-thumbnail-test-unsupported-size-between.png",
+        size=200)
+        with Image.open(outfile) as im:
+            self.assertEqual(im.width, 128)
+            self.assertEqual(im.height, 128)
+            self._compare_equal(im, "tmp-testapp-128.png")
+
 if __name__ == '__main__':
     unittest.main()
